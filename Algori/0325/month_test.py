"""
1번문제

# 입력된 길이가 6 (16진수 24비트 2진수)
# 16진수 -> 10진수 -> 2진수
binary_color = bin(int(color, 16))[2:].zfill(24)
  print(f'{int(color, 16):024b}')


# 입력된 길이가 24
# 2진수 -> 10진수 -> 16진수
binary_color = hex(int(color, 2))[2:].zfill(6)
print(f'{int(color, 2):06X}')
"""



"""
2번문제

각 섬사이의 다리 건설 비용을 조합으로 탐색하여
가능한 모든 다리 조합을 찾는다.

- 가지치기
1. 예산을 초과하는 경우
2. 건설가능한 다리의 개수를 초과한 경우
(남은 다리를 다 건설해도 기존 최대개수에 못 미치면)
"""

'''
함수(인덱스, N, 건설한 다리수, 건설한 다리의 총 비용)
    global min_cost
    global max_bridges

    # 가지치기 1 - 예산을 초과하는 경우
    if 건설한 다리의 총 비용 > V:
        return

    # 가지치기 2 - 남은 다리를 다 건설해도 기존 최대개수에 못 미치면
    if 건설한 다리수 + (N-i) < max_bridges:
        return 


    if 인덱스 == N:  # 모든 다리를 검토한 경우
        if 건설한 다리의 총 비용 <= V:  # 예산을 초과하지 않으면
            if 건설한 다리수 > max_bridges: # 건설 가능한 최대 개수인가
                max_bridges = 건설한 다리수
                min_cost = 건설한 다리의 총 비용
            elif max_bridges == 건설한 다리수 and min_cost > 건설한 다리의 총 비용 # 다리 최대 개수와 같으면 더 싸게 만들 수 있는가?
                min_cost = 건설한 다리의 총 비용
    else:
        # 다리를 건설하는 경우
        함수(인덱스+1, N, 건설한 다리수 + 1, 건설한 다리의 총 비용 + cost[i])
        # 다리를 건설하지 않는 경우
        함수(인덱스+1, N, 건설한 다리수, 건설한 다리의 총 비용)
    
for
    N, V  = 섬의수, 예산
    cost = 각 섬 사이의 다리 건설비용을 리스트로

    min_cost = 1000000 # 최소 비용 초기값
    max_bridges = 0 # 최대 다리 개수 초기값

    # 함수(인덱스, N, 건설한 다리수, 건설한 다리의 총 비용)
    함수(0, N, 0, 0)
'''